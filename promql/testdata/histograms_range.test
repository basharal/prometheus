# exactly the same as histograms.test to ensure backward compatibility.
load 5m
	testhistogram_range_bucket{range="0,0.1", start="positive"}		0+5x10
	testhistogram_range_bucket{range=".1,.2", start="positive"}		0+2x10
	testhistogram_range_bucket{range=".2,1e0", start="positive"}	0+4x10
	testhistogram_range_bucket{range="1,+Inf", start="positive"}	0+1x10
	testhistogram_range_bucket{range="-Inf,-.2", start="negative"}	0+1x10
	testhistogram_range_bucket{range="-.2,-0.1", start="negative"}	0+1x10
	testhistogram_range_bucket{range=".3,+Inf", start="negative"}	0+1x10


# Quantile too low.
eval instant at 50m histogram_quantile(-0.1, testhistogram_range_bucket)
	{start="positive"} -Inf
	{start="negative"} -Inf

# Quantile too high.
eval instant at 50m histogram_quantile(1.01, testhistogram_range_bucket)
	{start="positive"} +Inf
	{start="negative"} +Inf

# Quantile value in lowest bucket, which is positive.
eval instant at 50m histogram_quantile(0, testhistogram_range_bucket{start="positive"})
	{start="positive"} 0

# Quantile value in lowest bucket, which is negative.
eval instant at 50m histogram_quantile(0, testhistogram_range_bucket{start="negative"})
	{start="negative"} -0.2

# Quantile value in highest bucket.
eval instant at 50m histogram_quantile(1, testhistogram_range_bucket)
	{start="positive"} 1
	{start="negative"} 0.3

# Finally some useful quantiles.
eval instant at 50m histogram_quantile(0.2, testhistogram_range_bucket)
	{start="positive"} 0.048
	{start="negative"} -0.2


eval instant at 50m histogram_quantile(0.5, testhistogram_range_bucket)
	{start="positive"} 0.15
	{start="negative"} -0.15

eval instant at 50m histogram_quantile(0.8, testhistogram_range_bucket)
	{start="positive"} 0.72
	{start="negative"} 0.3

# More realistic with rates.
eval instant at 50m histogram_quantile(0.2, rate(testhistogram_range_bucket[5m]))
	{start="positive"} 0.048
	{start="negative"} -0.2

eval instant at 50m histogram_quantile(0.5, rate(testhistogram_range_bucket[5m]))
	{start="positive"} 0.15
	{start="negative"} -0.15

eval instant at 50m histogram_quantile(0.8, rate(testhistogram_range_bucket[5m]))
	{start="positive"} 0.72
	{start="negative"} 0.3


# exactly the same as histograms.test to ensure backward compatibility.
load 5m
	request_duration_seconds_range_bucket{job="job1", instance="ins1", range="0,0.1"}	0+1x10
	request_duration_seconds_range_bucket{job="job1", instance="ins1", range=".1,0.2"}	0+2x10
	request_duration_seconds_range_bucket{job="job1", instance="ins1", range=".2,+Inf"}	0+1x10
	request_duration_seconds_range_bucket{job="job1", instance="ins2", range="0,0.1"}	0+2x10
	request_duration_seconds_range_bucket{job="job1", instance="ins2", range=".1,0.2"}	0+3x10
	request_duration_seconds_range_bucket{job="job1", instance="ins2", range=".2,+Inf"}	0+1x10
	request_duration_seconds_range_bucket{job="job2", instance="ins1", range="0,0.1"}	0+3x10
	request_duration_seconds_range_bucket{job="job2", instance="ins1", range=".1,0.2"}	0+1x10
	request_duration_seconds_range_bucket{job="job2", instance="ins1", range=".2,+Inf"}	0+2x10
	request_duration_seconds_range_bucket{job="job2", instance="ins2", range="0,0.1"}	0+4x10
	request_duration_seconds_range_bucket{job="job2", instance="ins2", range=".1,0.2"}	0+3x10
	request_duration_seconds_range_bucket{job="job2", instance="ins2", range=".2,+Inf"}	0+2x10

# Aggregated histogram: Everything in one.
eval instant at 50m histogram_quantile(0.3, sum(rate(request_duration_seconds_range_bucket[5m])) by (range))
	{} 0.075

eval instant at 50m histogram_quantile(0.5, sum(rate(request_duration_seconds_range_bucket[5m])) by (range))
	{} 0.1277777777777778

# Aggregated histogram: Everything in one. Now with avg, which does not change anything.
eval instant at 50m histogram_quantile(0.3, avg(rate(request_duration_seconds_range_bucket[5m])) by (range))
	{} 0.075

eval instant at 50m histogram_quantile(0.5, avg(rate(request_duration_seconds_range_bucket[5m])) by (range))
	{} 0.12777777777777778

# Aggregated histogram: By job.
eval instant at 50m histogram_quantile(0.3, sum(rate(request_duration_seconds_range_bucket[5m])) by (range, instance))
	{instance="ins1"} 0.075
	{instance="ins2"} 0.075

eval instant at 50m histogram_quantile(0.5, sum(rate(request_duration_seconds_range_bucket[5m])) by (range, instance))
	{instance="ins1"} 0.1333333333
	{instance="ins2"} 0.125

# Aggregated histogram: By instance.
eval instant at 50m histogram_quantile(0.3, sum(rate(request_duration_seconds_range_bucket[5m])) by (range, job))
	{job="job1"} 0.1
	{job="job2"} 0.0642857142857143

eval instant at 50m histogram_quantile(0.5, sum(rate(request_duration_seconds_range_bucket[5m])) by (range, job))
	{job="job1"} 0.14
	{job="job2"} 0.1125

# Aggregated histogram: By job and instance.
eval instant at 50m histogram_quantile(0.3, sum(rate(request_duration_seconds_range_bucket[5m])) by (range, job, instance))
	{instance="ins1", job="job1"} 0.11
	{instance="ins2", job="job1"} 0.09
	{instance="ins1", job="job2"} 0.06
	{instance="ins2", job="job2"} 0.0675

eval instant at 50m histogram_quantile(0.5, sum(rate(request_duration_seconds_range_bucket[5m])) by (range, job, instance))
	{instance="ins1", job="job1"} 0.15
	{instance="ins2", job="job1"} 0.1333333333333333
	{instance="ins1", job="job2"} 0.1
	{instance="ins2", job="job2"} 0.1166666666666667

# The unaggregated histogram for comparison. Same result as the previous one.
eval instant at 50m histogram_quantile(0.3, rate(request_duration_seconds_range_bucket[5m]))
	{instance="ins1", job="job1"} 0.11
	{instance="ins2", job="job1"} 0.09
	{instance="ins1", job="job2"} 0.06
	{instance="ins2", job="job2"} 0.0675

eval instant at 50m histogram_quantile(0.5, rate(request_duration_seconds_range_bucket[5m]))
	{instance="ins1", job="job1"} 0.15
	{instance="ins2", job="job1"} 0.13333333333333333
	{instance="ins1", job="job2"} 0.1
	{instance="ins2", job="job2"} 0.11666666666666667


# New tests relevant for the new bucket-range features.

# Buckets with gaps, 0 counts, no +Inf, and duplicate entries.
load 5m
	mixed_range_bucket{job="job1", instance="ins1", range="0,0.1"}		0+1x10
	mixed_range_bucket{job="job1", instance="ins1", range=".5,0.7"}		0+3x10
	mixed_range_bucket{job="job1", instance="ins1", range="1,+Inf"}		0+1x10
	mixed_range_bucket{job="job1", instance="ins2", range="0,1"}		0+2x10
	mixed_range_bucket{job="job1", instance="ins2", range="1.5,1.6"}	0x10
	mixed_range_bucket{job="job1", instance="ins2", range="2,3"}		0+1x10
	mixed_range_bucket{job="job1", instance="ins2", range="2.0,3"}		0+1x10

eval instant at 50m histogram_quantile(0.5, rate(mixed_range_bucket[5m]))
	{instance="ins1", job="job1"} 0.6
	{instance="ins2", job="job1"} 1

eval instant at 50m histogram_quantile(0.8, rate(mixed_range_bucket[5m]))
	{instance="ins1", job="job1"} 0.7
	{instance="ins2", job="job1"} 2.6

eval instant at 50m histogram_quantile(1, rate(mixed_range_bucket[5m]))
	{instance="ins1", job="job1"} 1
	{instance="ins2", job="job1"} 3


# empty buckets
load 5m
	empty_bucket{range="0,0.1", job="job1", instance="ins1"} 	0x10

eval instant at 50m histogram_quantile(0.2, rate(empty_bucket[5m]))
